{"version":3,"sources":["components/new.js","components/item.js","components/orderButton.js","components/filterForm.js","components/filterGreater.js","App.js","serviceWorker.js","index.js"],"names":["NewCounter","onSubmit","useState","newForm","showNewForm","name","setName","Fragment","className","type","onChange","e","target","value","onClick","icon","faTimes","disabled","length","faCheck","faPlus","Item","title","counter","addOne","lessOne","erase","faMinus","OrderButton","up","setUp","temp","faSortAmountUpAlt","faSortAmountDown","FilterForm","textSearch","setTextSearch","data-testid","FilterGreater","greater","setGreater","term","faLessThan","faGreaterThan","App","counters","setCounters","searchTerm","setSearchTerm","orderTerm","setOrderTerm","useEffect","a","axios","get","results","data","jsonObj","asyncFunc","newCounter","post","push","addCounter","index","add","id","orderList","parm","dir","ordered","sort","it1","it2","filteredFunc","item","orderResult","searchResult","toLowerCase","includes","count","deleteItem","delete","splice","val","filter","map","reduce","total","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.8649fda0.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faTimes, faCheck,  faPlus } from '@fortawesome/free-solid-svg-icons'\r\nimport '../App.css';\r\n\r\nconst NewCounter = ({ onSubmit }) => {\r\n    const [newForm, showNewForm] = useState(false);\r\n    const [name, setName] = useState('');\r\n\r\n  return (\r\n    <React.Fragment>\r\n        {newForm ? <div className=\"form\">\r\n            <div className=\"input item1\">\r\n                <input type=\"text\" onChange={(e) => setName(e.target.value)}/>\r\n            </div>\r\n            <div className=\"item3\">\r\n              <button onClick={() => showNewForm(!newForm)}><FontAwesomeIcon icon={faTimes} /></button>\r\n            </div>\r\n            <div className=\"item2\">\r\n              <button onClick={() => onSubmit(name)} disabled={name.length === 0} className=\"submit\"><FontAwesomeIcon icon={faCheck} /></button>\r\n            </div>\r\n        </div> :\r\n        <button onClick={() => showNewForm(!newForm)}><FontAwesomeIcon icon={faPlus} /></button> }\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default NewCounter;\r\n","import React from 'react';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faMinus,  faPlus, faTimes } from '@fortawesome/free-solid-svg-icons'\r\nimport '../App.css';\r\n\r\nconst Item = ({ title, counter, addOne, lessOne, erase }) => {\r\n\r\n\r\n  return (\r\n    <div className=\"item\">\r\n        <span className=\"title item1\">{title}</span>\r\n        <div className=\"item2\">\r\n          <button  onClick={lessOne}><FontAwesomeIcon icon={faMinus} /></button>\r\n        </div>\r\n        <span className=\"counter item3\">{counter}</span>\r\n        <div className=\"item4\">\r\n          <button onClick={addOne} ><FontAwesomeIcon icon={faPlus} /></button>\r\n        </div>\r\n        <div className=\"item5\">\r\n          <button onClick={erase}><FontAwesomeIcon icon={faTimes} /></button>\r\n        </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Item;","import React, { useState } from 'react';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faSortAmountUpAlt, faSortAmountDown } from '@fortawesome/free-solid-svg-icons'\r\nimport '../App.css';\r\n\r\nconst OrderButton = ({ title, onClick }) => {\r\n    const [up, setUp] = useState(false);\r\n    const innerOnclick = () => {\r\n        const temp = !up;\r\n        onClick(up);\r\n        setUp(temp);\r\n    };\r\n  return (\r\n    <button onClick={innerOnclick}>\r\n        {title} <FontAwesomeIcon icon={up ? faSortAmountUpAlt : faSortAmountDown} />\r\n    </button>\r\n  );\r\n}\r\n\r\nexport default OrderButton;","import React, { useState } from 'react';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faCheck, faTimes } from '@fortawesome/free-solid-svg-icons'\r\nimport '../App.css';\r\n\r\nconst FilterForm = ({ onClick }) => {\r\n    const [textSearch, setTextSearch] = useState('');\r\n  return (\r\n    <div className=\"filter\">\r\n        <p>Filtro por TÃ­tulo</p>\r\n        <div className=\"input item1\">\r\n            <input data-testid=\"filterFormChange\" type=\"text\" onChange={(e) => setTextSearch(e.target.value)}/>\r\n        </div>\r\n        <div className=\"item2\">\r\n            <button className=\"submit\" onClick={() => onClick(textSearch)}><FontAwesomeIcon icon={faCheck} /></button>\r\n        </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default FilterForm;","import React, { useState } from 'react';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faGreaterThan, faLessThan } from '@fortawesome/free-solid-svg-icons'\r\nimport '../App.css';\r\n\r\nconst FilterGreater = ({ onClick }) => {\r\n    const [textSearch, setTextSearch] = useState('');\r\n    const [greater, setGreater] = useState(false);\r\n\r\n    const innerOnClick = () => {\r\n        onClick({ term: textSearch, greater: !greater });\r\n        setGreater(!greater);\r\n    }\r\n  return (\r\n    <div className=\"filter\">\r\n        <p>Filtro por Mayor o Menor</p>\r\n        <div className=\"input item1\">\r\n            <input type=\"number\" onChange={(e) => setTextSearch(e.target.value)}/>\r\n        </div>\r\n        <div className=\"item2\">\r\n            <button className=\"submit\" onClick={innerOnClick}><FontAwesomeIcon icon={greater ? faLessThan : faGreaterThan} /></button>\r\n        </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default FilterGreater;","import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport NewCounter from './components/new';\nimport Item from './components/item';\nimport OrderButton from './components/orderButton';\nimport FilterForm from './components/filterForm';\nimport FilterGreater from './components/filterGreater';\nimport './App.css';\n\nconst App = () => {\n  const [counters, setCounters] = useState([]);\n  const [searchTerm, setSearchTerm] = useState('');\n  const [orderTerm, setOrderTerm] = useState({ term: false, greater: false });\n\n  useEffect(() => {\n    const asyncFunc = async () => {\n      const results = await axios.get('api/v1/counters');\n      const jsonObj = await results.data;\n      setCounters(jsonObj);\n    };\n    asyncFunc();\n  }, []);\n\n  const newCounter = async (title) => {\n    const results = await axios.post('api/v1/counter', { title });\n    const temp = [ ...counters ];\n    temp.push(results.data);\n    setCounters(temp);\n  };\n\n  const addCounter = async (index, add) => {\n    const results = add === 1 ? await axios.post('/api/v1/counter/inc', { id: counters[index].id }) : await axios.post('/api/v1/counter/dec', { id: counters[index].id });\n    const temp = [ ...counters ];\n    temp[index] = results.data;\n    setCounters(temp);\n  }\n\n  const orderList = (parm, dir) => {\n    const ordered = [ ...counters ].sort((it1, it2) => {\n      if(it1[parm] > it2[parm]) return dir ? 1 : -1;\n      return dir ? -1 : 1;\n    })\n    setCounters(ordered);\n  }\n\n  const filteredFunc = (item) => {\n    const searchResult = searchTerm.length > 0 ? item.title.toLowerCase().includes(searchTerm.toLowerCase()) : true;\n    let orderResult;\n    if(orderTerm.term) {\n      orderResult = orderTerm.greater ? item.count > orderTerm.term : item.count < orderTerm.term;\n    } else {\n      orderResult = true;\n    }\n    return searchResult && orderResult;\n  }\n\n  const getTotal = (total, item) => total + item.count;\n\n  const deleteItem = async (id) => {\n    await axios.delete('api/v1/counter', { id });\n    const temp = [ ...counters ];\n    temp.splice(id, 1);\n    setCounters(temp);\n  };\n  \n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>\n          Contador\n          <NewCounter onSubmit={newCounter} />\n        </h1>\n      </header>\n      <div className=\"order\">\n        <OrderButton title=\"TÃ­tulo\" onClick={(dir) => orderList('title', dir)}/>\n        <OrderButton title=\"Contador\" onClick={(dir) => orderList('count', dir)}/>\n      </div>\n      <div className=\"filters\">\n        <FilterForm className=\"item1\" onClick={(val) => setSearchTerm(val)}/>\n        <FilterGreater className=\"item2\" onClick={(val) => setOrderTerm(val)}/>\n      </div>\n      <div className=\"body\">\n        { counters.length === 0 ? <h2>No hemos encontrado contadores</h2> : \n          counters.filter(filteredFunc).map((item, index) => \n            <Item \n              title={item.title} \n              counter={item.count}\n              addOne={() => addCounter(index, 1)}\n              lessOne={() => addCounter(index, -1)}\n              erase={() => deleteItem(index)}\n            />)\n        }\n      </div>\n      <div className=\"total\">\n        <h3 className=\"item3\">\n          Total: {counters.filter(filteredFunc).reduce(getTotal, 0)}\n        </h3>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}